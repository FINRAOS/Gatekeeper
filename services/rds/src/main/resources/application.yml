#
#  Copyright 2018. Gatekeeper Contributors
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#Global stuff
#This stuff is usually replaced by the container profile, feel free to set them to what you need should you find yourself doing local development
server.servlet.context-path: /api/gatekeeper-rds

gatekeeper:
  aws:
    proxyHost: unset
    proxyPort: unset
    sessionTimeout: 3480000
    sessionTimeoutPad: 120000
  accountInfoEndpoint: account-info.company.com
  accountInfoUri: accounts
  requiredSecurityGroup: RDS-support
  appIdentityTag: APP
  # These numbers hold if the user has the valid SDLC + Application membership for the databases on the environment they are trying to request for. (Dev/Ops roles)
  # If the requestor does not meet this criteria then approval is ALWAYS required. if a value is set to -1, approval is always required, no matter the days
  # should a requestor have multiple roles (say dev + dba for example) they will be treated as a dba.
  approvalThreshold:
    dev:
      readonly:
        dev: 180
        qa: 180
        prod: -1
      datafix:
        dev: 180
        qa: 180
        prod: -1
      dba:
        dev: 180
        qa: -1
        prod: -1
    ops:
      readonly:
        dev: -1
        qa: -1
        prod: 180
      datafix:
        dev: -1
        qa: -1
        prod: 1
      dba:
        dev: -1
        qa: -1
        prod: -1
    dba:
      readonly:
        dev: 180
        qa: 180
        prod: 180
      datafix:
        dev: 180
        qa: 180
        prod: 180
      dba:
        dev: 180
        qa: 180
        prod: -1
  #
  # These numbers will override the maximum approval day (set at app.maxDays) for the specified role w/ the specified environment.
  # If multiple roles are provided w/ one request, the lowest value among the roles shall be used.
  #
  overridePolicy:
    maxDays: 180
    overrides:
      dba:
        dba:
          prod: 7
  auth:
    userIdHeader: useraccount
    approverGroup: GATEKEEPER_RDS_APPROVER
    auditorGroup: GATEKEEPER_AUDITOR
    dbaGroupsPattern: COMPANY_([a-zA-Z]+)_ADBA
    opsGroupsPattern: COMPANY_([a-zA-Z]+)_OPS
    devGroupsPattern: COMPANY_([a-zA-Z]+)_(DEV|QC|QA|PROD)_INSTALL_ENGINEER

  email:
    from: Gatekeeper@company.com
    team: GK-Owners@company.com
    approverEmails: GK-APPROVERS@company.com
    opsEmails: GK-OPS@company.com

  db:
    supportedDbs:
      mysql: mySQLDBConnection
      postgres: postgresDBConnection
      aurora: mySQLDBConnection
      aurora-mysql: mySQLDBConnection
      aurora-postgresql: postgresDBConnection
    assumeMinServerVersion: assumeMinServerVersion=9.4
    sslParams: ssl=${gatekeeper.db.ssl}&sslmode=${gatekeeper.db.sslMode}&sslrootcert=${gatekeeper.db.sslCert}
    postgres:
      ssl: true
      connectTimeout: 5
      sslMode: verify-full
      sslCert: /etc/aws-rds/ssl/rds-combined-ca-bundle.pem
    mysql:
      ssl: connectTimeout=5000&useSSL=true&requireSSL=true&serverSslCert=/etc/aws-rds/rds-combined-ca-bundle.pem
    gkUser: gatekeeper
    gkPass: ${GATEKEEPER_RDS_USER_PASSWORD}

log:
  filename: application.log

spring:
  profiles.active: local
  loader.path:
  activiti:
    asyncExecutorEnabled: true
    jobExecutorActivate: true
    databaseSchemaUpdate: true
    databaseSchema: gatekeeper_rds
  ldap:
    base: DC=com
    userBase: OU=Users,DC=com
    contextSource:
      url: ldaps://active-directory.company.com:636
      userDn: CN=ldap_user,OU=Service Accounts,DC=com
      password: ${gatekeeper.auth.ldap.userPassword}

    mail:
      host: localhost
      port: 25
server:
  tomcat:
    max-http-header-size: 32768

---
#Unit Test Profile
gatekeeper:
  email:
    from: UNIT_FROM@company.com
    team: DL-UNIT_TEAM@company.com

spring:
  profiles: unit-test
  mail:
    host: localhost
    port: 8007

---
#Container Profile

spring:
  profiles: container

  ldap:
    contextSource:
      url: ${gatekeeper.auth.ldap.server}
      userDn: ${gatekeeper.auth.ldap.userDn}
      base: ${gatekeeper.auth.ldap.base}
      password: ${gatekeeper.auth.ldap.userPassword}
  mail:
    host: ${gatekeeper.email.host}
    port: ${gatekeeper.email.port}

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate.default_schema: ${gatekeeper.db.schema}
    generate-ddl: false
    show-sql: false

  activiti:
    databaseSchemaUpdate: true
    databaseSchema: ${gatekeeper.db.schema}

  datasource:
    platform: postgres
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://${gatekeeper.db.url}:${gatekeeper.db.port}/${gatekeeper.db.database}?ApplicationName=GatekeeperRDS&currentSchema=${gatekeeper.db.schema}&${gatekeeper.db.sslParams}
    username: ${gatekeeper.db.user}
    password: ${gatekeeper.db.password}
    hikari:
      minimum-idle: 2
      maximum-pool-size: 2

gatekeeper:
  db:
    assumeMinServerVersion: assumeMinServerVersion=${gatekeeper.rds.postgresMinServerVersion}
    postgres:
      ssl: ${gatekeeper.rds.ssl}
      connectTimeout: ${gatekeeper.rds.connectTimeout}
      sslMode: ${gatekeeper.rds.sslMode}
      sslCert: ${gatekeeper.rds.sslCert}
    mysql:
      ssl: connectTimeout=${gatekeeper.rds.connectTimeout}&useSSL=${gatekeeper.rds.ssl}&requireSSL=${gatekeeper.rds.ssl}&serverSslCert=${gatekeeper.rds.sslCert}
    gkUser: ${gatekeeper.rds.user}
    gkPass: ${gatekeeper.rds.password}
    gkCredentialProvider: ${gatekeeper.rds.gkCredentialProvider}

