<?xml version='1.0' encoding='UTF-8'?>
    <definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:xsd="http://www.w3.org/2001/XMLSchema"
             xmlns:activiti="http://activiti.org/bpmn"
             xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"
             xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC"
             xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI"
             typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath"
             targetNamespace="http://www.activiti.org/processdef">

    <process id="gatekeeperAccessRequest" name="Gatekeeper" isExecutable="true">
        <startEvent id="start"/>
        <sequenceFlow id="createRequest" sourceRef="start" targetRef="determineIfApprovalNeeded" />
        <exclusiveGateway id="determineIfApprovalNeeded" name="Determine if Approval Needed" default="noApprovalNeeded" />
        <sequenceFlow id="noApprovalNeeded" sourceRef="determineIfApprovalNeeded" targetRef="grantAccess">
        </sequenceFlow>
        <sequenceFlow id="isApprovalNeeded" sourceRef="determineIfApprovalNeeded" targetRef="notifyAdmins" >
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${accessRequestService.isApprovalNeeded(accessRequest) == true}]]>
            </conditionExpression>
        </sequenceFlow>
        <serviceTask id="notifyAdmins" name="Notify Admins Of Request" activiti:expression="${emailServiceWrapper.notifyAdmins(accessRequest)}" />
        <sequenceFlow id="createAccessRequestUserTask" sourceRef="notifyAdmins" targetRef="reviewAccessRequest" />
        <userTask id="reviewAccessRequest" name="Review Access Request">
            <documentation>
                {"requestor":"${accessRequest.requestorName} (${accessRequest.requestorId})","hours":"${accessRequest.hours}","instances":"${accessRequest.instances}","users:":"${accessRequest.users}"}
            </documentation>
            <extensionElements>
                <activiti:taskListener event="create" class="org.finra.gatekeeper.services.accessrequest.listeners.GatekeeperAccessRequestHandler"/>
            </extensionElements>
        </userTask>
        <sequenceFlow id="isRequestCanceled" sourceRef="reviewAccessRequest" targetRef="sendCanceledNotification">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${requestStatus.getValue().equals('CANCELED')}]]>
            </conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="isRequestRejected" sourceRef="reviewAccessRequest" targetRef="sendRejectNotification">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${requestStatus.getValue().equals('APPROVAL_REJECTED')}]]>
            </conditionExpression>
        </sequenceFlow>
        <sequenceFlow id="isRequestApproved" sourceRef="reviewAccessRequest" targetRef="grantAccess">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${requestStatus.getValue().equals('APPROVAL_GRANTED')}]]>
            </conditionExpression>
        </sequenceFlow>
        <serviceTask id="sendRejectNotification" name="Push Rejection Notification" activiti:expression="${emailServiceWrapper.notifyRejected(accessRequest)}"/>
        <serviceTask id="sendCanceledNotification" name="Push Canceled Notification" activiti:expression="${emailServiceWrapper.notifyCanceled(accessRequest)}"/>
        <serviceTask id="grantAccess" name="Grant Temporary Access" activiti:delegateExpression="${grantAccessServiceTask}"/>

        <sequenceFlow id="checkApproval" sourceRef="grantAccess" targetRef="exceptionWasApprovalNeeded" />
        <exclusiveGateway id="exceptionWasApprovalNeeded" name="Determine if Approval Was Needed" default="reopenRequest" />
        <sequenceFlow id="reopenRequest" sourceRef="exceptionWasApprovalNeeded" targetRef="reviewAccessRequest" >
        </sequenceFlow>
        <sequenceFlow id="notifyApproval" sourceRef="exceptionWasApprovalNeeded" targetRef="sendApprovalNotification">
            <conditionExpression xsi:type="tFormalExpression">
                <![CDATA[${requestStatus.getValue().equals('APPROVAL_GRANTED') || requestStatus.getValue().equals('GRANTED')}]]>
            </conditionExpression>
        </sequenceFlow>


        <serviceTask id="sendApprovalNotification" name="Push Approval Notification" activiti:expression="${emailServiceWrapper.notifyApproved(accessRequest)}"/>
        <sequenceFlow sourceRef="sendCanceledNotification" targetRef="endAccessRequest"/>
        <sequenceFlow sourceRef="sendRejectNotification" targetRef="endAccessRequest"/>
        <sequenceFlow sourceRef="sendApprovalNotification" targetRef="waitForExpiration"/>
        <intermediateCatchEvent id="waitForExpiration">
            <outgoing>sendExpiredNotification</outgoing>
            <timerEventDefinition>
                <timeDuration>PT${accessRequest.getHours()}H</timeDuration>
            </timerEventDefinition>
        </intermediateCatchEvent>
        <sequenceFlow id="accessExpired" sourceRef="waitForExpiration" targetRef="revokeAccess" />
        <serviceTask id="revokeAccess" activiti:delegateExpression="${revokeAccessServiceTask}" activiti:async="true" >
            <extensionElements>
                <activiti:failedJobRetryTimeCycle>R5/PT10S</activiti:failedJobRetryTimeCycle>
            </extensionElements>
        </serviceTask>
        <sequenceFlow id="notifyOfExpiration" sourceRef="revokeAccess" targetRef="sendExpiredNotification" />
        <serviceTask id="sendExpiredNotification" activiti:expression="${emailServiceWrapper.notifyExpired(accessRequest)}" />
        <sequenceFlow id="requestExpired" sourceRef="sendExpiredNotification" targetRef="endAccessRequest" />
        <endEvent id="endAccessRequest"/>
    </process>
</definitions>
